{"version":3,"sources":["components/schedules/GenerateCourseDayHeader.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/ModuleSection.jsx","components/schedules/sidebar/Modules.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","download.js","generateCourseDates.js","components/BatchScheduleGenerator.jsx","App.js","index.js"],"names":["localDate","formattedDate","meetingTime","timeZone","timeOffset","holiday","NormalCourseDay","todaySectionHeader","day","timeZoneSet","console","log","DateTime","fromISO","meetingDateTimeUTC","zone","toFormat","className","courseWeek","courseDay","dateTypes","module","HolidayCourseDay","fromFormat","courseDate","holidayType","location","name","GenerateCourseDayHeader","DisplaySection","heading","sectionType","map","item","index","id","dayNumber","url","href","target","rel","GenerateNotifications","status","projectdue","ipdue","projectstart","items","generateSectionArray","datetype","classType","sectionArray","Object","keys","forEach","section","classTypeSection","preClass","inClass","postClass","x","length","push","GenerateDatetypeSections","GenerateCourseDayContent","projects","projectDue","projectStart","ip","ipDue","undefined","TableSectionContent","TableClass","sectionClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","coursetype","today","Accordion","Header","now","num","Body","Table","bordered","hover","size","date","onClick","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","firstDay","moveDate","lastDay","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","plus","days","monthDatesArray","currentWeekData","currentMonthData","i","includes","ContentTable","startDay","useState","useEffect","CurrentDaySection","nextDay","previousDayId","currentDayId","firstDayOfCourse","previousDay","dayBeforeStr","weekday","dayBefore","minus","weeks","set","findPreviousDay","findNextDay","ScheduleContent","nextToday","title","months","defaultActiveKey","Item","eventKey","ModuleSection","sectionNames","info","Modules","moduleNameArray","scheduleUrls","scheduleObjs","filter","classtype","itemUrlArray","split","generatingDataArrays","accessingRequiredItems","sort","Nav","moduleName","general","poce","ice","urlObj","splitName","dataObj","sortScheduleObjs","CourseWeeks","CurrentWeekDiv","ref","currentWeekRef","current","scrollIntoView","block","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","variant","navbarScroll","Link","week","navId","sidebarId","SideBar","BatchSchedule","data","JSON","parse","stringify","courseType","courseDatesArray","a","b","ScheduleContainer","batchArray","Navbar","bg","Brand","src","logo","alt","batch","as","to","toUpperCase","exact","path","content","download","filename","dataStr","encodeURIComponent","dlAnchorElem","document","createElement","setAttribute","click","publicHolidays","holidayData","publicHolidayArray","key","schoolHolidays","schoolHolidayArray","winterBreak","bootcampData","publicHolidaysNotSchoolHolidays","getLocalDateTime","utc","changedFormat","toUTC","toISO","generateHolidayObject","dateString","dateObj","generateCourseDayObject","weekDay","getFilename","startDate","endDate","batchNum","displayDate","generateDataObject","ftbcDataJson","ptbcDataJson","courseDayCount","currDate","dateWeek","topLevelObject","daysOfWeek","courseStartDaysOfWeekIndex","totalCourseDays","generateTopLevelObject","dayArray","dayIndex","courseName","BatchScheduleGenerator","setStartDate","setBatchNum","setCourseType","Form","Group","controlId","Label","Control","type","value","onChange","e","Select","Button","handleDownload","App","ftbc9","ftbc10","ftbc11","ftbc12","ptbc5","ptbc6","ptbc7","ptbc8","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.145bc837.chunk.js","sourcesContent":["import React from \"react\";\nimport { DateTime } from \"luxon\";\n\n// Generate course day header for normal course day\nfunction NormalCourseDay({ todaySectionHeader, day, timeZoneSet }) {\n  console.log(\"dsy and time\", day, timeOffset);\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}, Week {day.courseWeek}, Course Day{\" \"}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          {day.courseDay > 0 && <p>{day.dateTypes.module}</p>}\n        </div>\n      )}\n    </>\n  );\n}\n\n// helper function that generates courseday header for a holiday\nfunction HolidayCourseDay({ day, timeZoneSet }) {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/school holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `${day.dateTypes.location} Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = \"School Holiday\";\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>{`${formattedDate}: ${holiday}`}</h2>\n        </div>\n      )}\n    </>\n  );\n}\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nfunction GenerateCourseDayHeader({ todaySectionHeader, day }) {\n  console.log(\"one more time\", todaySectionHeader, day);\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n  return (\n    <HolidayCourseDay\n      todaySectionHeader={todaySectionHeader}\n      day={day}\n      timeZoneSet={timeZoneSet}\n    />\n  );\n}\n\nexport default GenerateCourseDayHeader;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6 className=\"class-header\">{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function of sidebar modules\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          } else if (heading === \"In Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gic-${index}`;\n          } else {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpostc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ ip due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  ipdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === ipdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status &&\n        status.items &&\n        status.items.map((item) => {\n          return (\n            <li>\n              <a\n                href={item.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"notification-item\"\n              >\n                <h6>{item.name}</h6>\n              </a>\n            </li>\n          );\n        })}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n  Object.keys(datetype).forEach((section) => {\n    let classTypeSection;\n    // classTypeSection is determined by what classType is\n    if (classType === \"preClass\") {\n      classTypeSection = datetype[section].preClass;\n    } else if (classType === \"inClass\") {\n      classTypeSection = datetype[section].inClass;\n    } else {\n      classTypeSection = datetype[section].postClass;\n    }\n\n    if (classTypeSection) {\n      // if there are items in classTypeSection, the items are pushed into sectionArray\n      if (classTypeSection.items) {\n        for (let x = 0; x < classTypeSection.items.length; x += 1) {\n          sectionArray.push(classTypeSection.items[x]);\n        }\n      }\n    }\n  });\n  return sectionArray;\n};\n\nexport default generateSectionArray;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\nimport generateSectionArray from \"../../generateSectionArray\";\n\nfunction GenerateDatetypeSections({ datetype, classType, day }) {\n  // stores items that are in a particular section of a datetype\n  const sectionArray = [];\n\n  generateSectionArray(datetype, classType, sectionArray);\n\n  // sets the heading depending on the classtype\n  let heading;\n  if (sectionArray.length > 0) {\n    // a header will be created\n    if (classType === \"preClass\") {\n      heading = \"Pre Class\";\n    } else if (classType === \"inClass\") {\n      heading = \"In Class\";\n    } else {\n      heading = \"Post Class\";\n    }\n  }\n\n  return (\n    <div>\n      <DisplaySection heading={heading} sectionType={sectionArray} day={day} />\n    </div>\n  );\n}\n\nexport default GenerateDatetypeSections;\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  let projectdue;\n  let projectstart;\n  let ipdue;\n  if (!day.dateTypes.holidayType) {\n    if (day.dateTypes.projects) {\n      projectdue = day.dateTypes.projects.projectDue;\n      projectstart = day.dateTypes.projects.projectStart;\n    }\n\n    if (day.dateTypes.ip) {\n      ipdue = day.dateTypes.ip.ipDue;\n    }\n  }\n \n\n  return (\n    <>\n      {/* project due notification  */}\n      {projectdue !== undefined && (\n        <GenerateNotifications\n        status={projectdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n      {/* career prep due notification  */}\n      {ipdue !== undefined && (\n        <GenerateNotifications\n        status={ipdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      {projectstart !== undefined && (\n        <GenerateNotifications\n        status={projectstart}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      )}\n      \n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from \"react\";\nimport generateSectionArray from \"../../../generateSectionArray\";\nimport TableSectionContent from \"./TableSectionContent\";\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, sectionClass }) {\n  const classArray = [];\n  const datetype = day.dateTypes;\n\n  // gets all items in a particular section\n  generateSectionArray(datetype, sectionClass, classArray);\n\n  return (\n    <td>\n      <TableSectionContent sectionArray={classArray} />\n    </td>\n  );\n}\n\nexport default TableClass;\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    \n    let projectdue;\n    let projectstart;\n    let ipdue;\n\n    if(!day.dateTypes.holidayType) {\n        if (day.dateTypes.projects) {\n        projectdue = day.dateTypes.projects.projectDue;\n        projectstart = day.dateTypes.projects.projectStart;\n        }\n\n        if (day.dateTypes.ip) {\n        ipdue = day.dateTypes.ip.ipDue;\n        }\n    }\n    \n    return (\n        <div className=\"table-projects\">\n            {projectdue !== undefined && (\n                <GenerateNotifications\n                status={projectdue}\n                ipdue={ipdue}\n                projectdue={projectdue}\n                projectstart={projectstart}\n                day={day}\n            />\n            )}\n            {projectstart !== undefined && (\n                <GenerateNotifications\n                status={projectstart}\n                ipdue={ipdue}\n                projectdue={projectdue}\n                projectstart={projectstart}\n                day={day}\n            />\n            )}\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\n\nfunction ScheduleTable({ weekNumbers, tableData, coursetype, today }) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Current Course Week:{\" \"}\n                {weekNumbers.map((num) => (\n                  <span>{num}</span>\n                ))}\n              </>\n            )}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") !==\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Next Course Week:{\" \"}\n                {weekNumbers.map((num) => (\n                  <span>{num}</span>\n                ))}\n              </>\n            )}\n          {coursetype === \"pt\" && <>Current Month's Schedule</>}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th />\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n              <th>Post Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                \"dd-MM-yyyy\"\n              ).toFormat(\"EEE d MMM\");\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat(\"dd-MM-yyyy\") ===\n                      DateTime.now().toFormat(\"dd-MM-yyyy\") &&\n                    date.courseDate === today.toFormat(\"dd-MM-yyyy\")\n                      ? \"table-secondary\"\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() =>\n                        scroller.scrollTo(id, {\n                          smooth: true,\n                          offset: -70,\n                          duration: 100,\n                        })\n                      }\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week {date.courseWeek}\n                      <br />\n                      Course Day {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"postClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf('month');\n  lastDayMonth = today.endOf('month');\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf('week');\n  lastDay = today.endOf('week');\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat('dd-MM-yyyy'));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === 'pt') {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat('dd-MM-yyyy'));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === 'pt') {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n    for (let i = 0; i < weekDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === weekDatesArray[i]) {\n          currentWeekData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentWeekData);\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date]\n      && !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n};\n\nexport default generateTableData;\n","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\nimport { DateTime } from \"luxon\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let dayBeforeStr;\n\n  if (coursetype === \"ft\" && DateTime.now() > firstDayOfCourse) {\n    // Day before Mon is prev Thu\n    if (today.weekday === 1) {\n      dayBeforeStr = today.plus({ days: -4 }).toFormat(\"dd-MM-yyyy\");\n      // Day before Sun is prev Thu\n    } else if (today.weekday === 7) {\n      dayBeforeStr = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n      // Day before Sat is prev Thu\n    } else if (today.weekday === 6) {\n      dayBeforeStr = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n      // Day before all other days is yesterday\n    } else {\n      dayBeforeStr = today.plus({ days: -1 }).toFormat(\"dd-MM-yyyy\");\n    }\n\n    // If dayBefore is a course day and a holiday, use prev dayBefore\n    if (\n      scheduleData[dayBeforeStr] &&\n      scheduleData[dayBeforeStr].dateTypes.holidayType\n    ) {\n      const dayBefore = DateTime.fromFormat(dayBeforeStr, \"dd-MM-yyyy\");\n\n      // If dayBefore is Mon and Mon is PH, set dayBefore to prev Thu\n      if (dayBefore.weekday === 1) {\n        dayBeforeStr = dayBefore.minus({ days: 4 }).toFormat(\"dd-MM-yyyy\");\n        // Else move dayBefore 1 more day back\n      } else {\n        dayBeforeStr = dayBefore.minus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n      }\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() > firstDayOfCourse) {\n    // If today is Mon or Tue, set day before to prev Sat\n    if (today.weekday === 1 || today.weekday === 2) {\n      dayBeforeStr = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n      // If today is Wed-Sat, set day before to prev Tue\n    } else if (today.weekday > 2 && today.weekday <= 6) {\n      dayBeforeStr = today.set({ weekday: 2 }).toFormat(\"dd-MM-yyyy\");\n      // If today is Sun, set day before to prev Sat\n    } else {\n      dayBeforeStr = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n\n    // If dayBefore is a course day and a holiday, use prev dayBefore\n    if (\n      scheduleData[dayBeforeStr] &&\n      scheduleData[dayBeforeStr].dateTypes.holidayType\n    ) {\n      const dayBefore = DateTime.fromFormat(dayBeforeStr, \"dd-MM-yyyy\");\n      // If dayBefore is Tue, use the prev Sat as dayBefore\n      if (dayBefore.weekday === 2) {\n        dayBeforeStr = dayBefore.minus({ days: 3 }).toFormat(\"dd-MM-yyyy\");\n        // If dayBefore is Sat, use the prev Tue as dayBefore\n      } else if (dayBefore.weekday === 6) {\n        dayBeforeStr = dayBefore.minus({ days: 4 }).toFormat(\"dd-MM-yyyy\");\n      }\n    }\n  }\n\n  return dayBeforeStr;\n};\n\n//helper function that finds next course day\nconst findNextDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let nextDay;\n\n  if (coursetype === \"ft\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 2) {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 2 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[nextDay] && scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = DateTime.fromFormat(nextDay, \"dd-MM-yyyy\")\n      .plus({ days: 1 })\n      .toFormat(\"dd-MM-yyyy\");\n    // console.log('next day', nextDay);\n    // nextDay = findNextDay(scheduleData, nextDay, coursetype, firstDayOfCourse);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({\n  scheduleData,\n  coursetype,\n  today,\n  firstDayOfCourse,\n}) {\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay = null;\n  let nextDay;\n  let previousDayId;\n  let currentDayId;\n\n  // finds previous course day, only applicable if course has already started\n  if (DateTime.now() > firstDayOfCourse) {\n    previousDay = findPreviousDay(\n      scheduleData,\n      today,\n      coursetype,\n      firstDayOfCourse\n    );\n    nextDay = findNextDay(scheduleData, today, coursetype, firstDayOfCourse);\n\n    if (scheduleData[previousDay]) {\n      previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n    }\n\n    if (scheduleData[nextDay]) {\n      currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n    }\n  } else {\n    nextDay = firstDayOfCourse.toFormat(\"dd-MM-yyyy\");\n  }\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {scheduleData[nextDay] && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  {scheduleData[previousDay] && (\n                    <GenerateDatetypeSections\n                      datetype={scheduleData[previousDay].dateTypes}\n                      classType=\"postClass\"\n                      day={scheduleData[previousDay]}\n                    />\n                  )}\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({\n  scheduleData,\n  coursetype,\n  title,\n  today,\n  firstDayOfCourse,\n}) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  // let today = DateTime.now();\n\n  // // checking if first day of course is after today, if so today = first day of course, so that current day\n  // // section and tables and display first day/ weeks info\n  // const courseDatesArray = [];\n  // Object.keys(scheduleData).map((day) => {\n  //   courseDatesArray.push(day);\n  // });\n  // courseDatesArray.sort(function(a, b){return a-b});\n  // const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  // if (today < firstDayOfCourse) {\n  //   today = firstDayOfCourse;\n  // }\n\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = today.plus({ weeks: 1 });\n  } else {\n    nextToday = today.plus({ months: 1 });\n  }\n\n  console.log(\"scheduleData\", scheduleData);\n\n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n\n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport { scroller } from \"react-scroll\";\n\nfunction ModuleSection({\n  section,\n  index,\n  sectionNames,\n  coursetype,\n  scheduleData,\n}) {\n  return (\n    <>\n      {section.length > 1 && (\n        <Accordion.Item eventKey={index}>\n          <Accordion.Header>{sectionNames[index]}</Accordion.Header>\n          <Accordion.Body>\n            {section.map((info) => {\n              const id = `${coursetype}-week-${\n                scheduleData[info.date].courseWeek\n              }-day-${scheduleData[info.date].dayNumber}`;\n\n              return (\n                <p\n                  onClick={() =>\n                    scroller.scrollTo(id, {\n                      smooth: true,\n                      offset: -70,\n                      duration: 100,\n                    })\n                  }\n                >\n                  {info.name}\n                </p>\n              );\n            })}\n          </Accordion.Body>\n        </Accordion.Item>\n      )}\n    </>\n  );\n}\n\nexport default ModuleSection;\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport ModuleSection from \"./ModuleSection\";\n\n// helper function for generating scheduleObjs array and moduleNameArray\nconst generatingDataArrays = (\n  scheduleData,\n  day,\n  section,\n  classtype,\n  scheduleUrls,\n  scheduleObjs,\n  moduleNameArray\n) => {\n  if (scheduleData[day].dateTypes[section][classtype].items) {\n    scheduleData[day].dateTypes[section][classtype].items.map((item) => {\n      // if the item has a url\n      if (item.url && !scheduleUrls.includes(item.url)) {\n        // push the url into scheduleUrls\n        scheduleUrls.push(item.url);\n        // push item name, url and date into scheduleObjs\n        scheduleObjs.push({ name: item.name, url: item.url, date: day });\n      }\n      if (item.url) {\n        const itemUrlArray = item.url.split(\"/\");\n        // itemUrlArray[3] is used as the heading of each module section\n        // we're filtering out everythign that does not come from the gitbook\n        if (\n          !moduleNameArray.includes(itemUrlArray[3]) &&\n          itemUrlArray[2] === \"bootcamp.rocketacademy.co\"\n        ) {\n          moduleNameArray.push(itemUrlArray[3]);\n        }\n      }\n    });\n  }\n};\n\n// helper finction for accessing required items (items in each class of each section of each day)\nconst accessingRequiredItems = (\n  scheduleData,\n  day,\n  scheduleUrls,\n  scheduleObjs,\n  moduleNameArray\n) => {\n  if (scheduleData[day].dateTypes.module) {\n    Object.keys(scheduleData[day].dateTypes)\n      // filtering out module key\n      .filter((section) => section !== \"module\")\n      .map((section) => {\n        Object.keys(scheduleData[day].dateTypes[section])\n          // filtering out type key\n          .filter((classtype) => classtype !== \"type\")\n          .map((classtype) => {\n            // if there item array exists in a section, call the function that gets the required data\n            generatingDataArrays(\n              scheduleData,\n              day,\n              section,\n              classtype,\n              scheduleUrls,\n              scheduleObjs,\n              moduleNameArray\n            );\n          });\n      });\n  }\n};\n\nconst sortScheduleObjs = (urlObj, moduleName, general, ice, poce) => {\n  const urlModule = urlObj.url.split(\"/\");\n  // this is the part of the url which we used to get the moduleName\n  const urlModuleName = urlModule[3];\n  // if the module name in the url is the current moduleName\n  if (urlModuleName === moduleName) {\n    const splitName = urlObj.name.split(\".\");\n    const dataObj = { name: urlObj.name, date: urlObj.date };\n    // push the object into the relevant array\n    if (splitName[1] === \"ICE\") {\n      ice.push(dataObj);\n    } else if (splitName[1] === \"POCE\") {\n      poce.push(dataObj);\n    } else {\n      general.push(dataObj);\n    }\n  }\n};\n\n// ###################################################################\n// ###################################################################\n\nfunction Modules({ scheduleData, coursetype }) {\n  const moduleNameArray = [];\n  const scheduleUrls = [];\n  const scheduleObjs = [];\n\n  // looking through entire data file\n  Object.keys(scheduleData).map((day) => {\n    accessingRequiredItems(\n      scheduleData,\n      day,\n      scheduleUrls,\n      scheduleObjs,\n      moduleNameArray\n    );\n  });\n\n  moduleNameArray.sort();\n\n  return (\n    <div className=\"sidebar-modules\">\n      {moduleNameArray.length > 0 && <h4>Modules</h4>}\n      <Nav className=\"flex-column\">\n        {moduleNameArray.map((moduleName) => {\n          // creating array to store items of each section\n          const general = [];\n          const poce = [];\n          const ice = [];\n\n          // sort each object in scheduleObjs into one of 3 arrays, general, ice, poce\n          scheduleObjs.forEach((urlObj) => {\n            sortScheduleObjs(urlObj, moduleName, general, ice, poce);\n          });\n\n          const sectionArray = [];\n          sectionArray.push(general);\n          sectionArray.push(ice);\n          sectionArray.push(poce);\n\n          // names of each section\n          const sectionNames = [\"General\", \"In Class\", \"Post Class\"];\n\n          return (\n            <>\n              <h6>{moduleName}</h6>\n              <Accordion>\n                {sectionArray.map((section, index) => {\n                  return (\n                    <ModuleSection\n                      section={section}\n                      index={index}\n                      sectionNames={sectionNames}\n                      coursetype={coursetype}\n                      scheduleData={scheduleData}\n                    />\n                  );\n                })}\n              </Accordion>\n              <br />\n            </>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default Modules;\n","import React, { useEffect, useRef } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport Modules from \"./Modules\";\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype, firstDayOfCourse }) {\n  const weeks = [];\n  // used to scroll to current week on page load\n  const executeScroll = () => {\n    if (currentWeekRef.current) {\n      currentWeekRef.current.scrollIntoView({ block: \"center\" });\n    }\n  };\n\n  useEffect(() => {\n    if (DateTime.now() > firstDayOfCourse) {\n      executeScroll();\n    }\n  }, []);\n\n  function CurrentWeekDiv() {\n    return <div ref={currentWeekRef} />;\n  }\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const currentWeekRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Current Day\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          let id;\n          if (coursetype === \"pt\") {\n            id = `${coursetype}-week-${week}-day-2`;\n          } else {\n            id = `${coursetype}-week-${week}-day-1`;\n          }\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                {week === weekNumber[0] &&\n                  DateTime.now() > firstDayOfCourse && <CurrentWeekDiv />}\n                <div>\n                  {week === null ? \"Break\" : `Week ${week}`}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {\"  \"}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      <Modules scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype, firstDayOfCourse }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks \n        scheduleData={scheduleData} \n        coursetype={coursetype} \n        firstDayOfCourse={firstDayOfCourse}  />\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\nimport { DateTime } from \"luxon\";\n\nfunction BatchSchedule({ data, title }) {\n  console.log(data, title);\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n  console.log(scheduleData);\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"PTBC\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  let today = DateTime.now();\n\n  // checking if first day of course is after today, if so today = first day of course, so that current day\n  // section and tables and display first day/ weeks info\n  const courseDatesArray = [];\n  Object.keys(scheduleData).map((day) => {\n    courseDatesArray.push(day);\n  });\n  courseDatesArray.sort(function (a, b) {\n    return a - b;\n  });\n  const firstDayOfCourse = DateTime.fromFormat(\n    courseDatesArray[0],\n    \"dd-MM-yyyy\"\n  );\n\n  if (today < firstDayOfCourse) {\n    today = firstDayOfCourse;\n  }\n  console.log(courseDatesArray);\n  console.log(firstDayOfCourse);\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from \"react\";\nimport { Route, Switch, Link, Redirect } from \"react-router-dom\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport logo from \"../../assets/4-MILK.png\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\" />\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => (\n            <Nav.Link as={Link} to={`/${batch.name}`}>\n              {batch.name.toUpperCase()}\n            </Nav.Link>\n          ))}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to={`/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => (\n          <Route path={`/${batch.name}`}>\n            <BatchSchedule\n              data={batch.content}\n              title={batch.name.toUpperCase()}\n            />\n          </Route>\n        ))}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","const download = (data, filename) => {\n  // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n  const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n    JSON.stringify(data)\n  )}`;\n  const dlAnchorElem = document.createElement(\"a\");\n  dlAnchorElem.setAttribute(\"href\", dataStr);\n  dlAnchorElem.setAttribute(\"download\", filename);\n  dlAnchorElem.click();\n};\n\nexport default download;\n","import { DateTime } from \"luxon\";\nimport holidayData from \"./data/holidays.json\";\n// import ftbcDataJson from \"./data/schedule-templates/ftbc1.0-schedule-template.json\";\n// import ftbcDataJson from \"./data/schedule-templates/ftbc2.0-schedule-template.json\";\nimport ftbcDataJson from \"./data/schedule-templates/ftbc3.0-schedule-template.json\";\n// import ptbcDataJson from \"./data/schedule-templates/ptbc1.0-schedule-template.json\";\n// import ptbcDataJson from \"./data/schedule-templates/ptbc2.0-schedule-template.json\";\nimport ptbcDataJson from \"./data/schedule-templates/ptbc3.0-schedule-template.json\";\n\nconst { publicHolidays } = holidayData;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key) => {\n  publicHolidayArray.push(key);\n});\n\nconst { schoolHolidays } = holidayData;\nconst schoolHolidayArray = [];\nconst winterBreak = [];\n// Get array of all school holiday dates\nObject.keys(schoolHolidays).map((key) => {\n  schoolHolidayArray.push(key);\n  // Get array of winter break dates\n  if (schoolHolidays[key].name === \"winter break\") {\n    winterBreak.push(schoolHolidays[key].date);\n  }\n});\n\nconst publicHolidaysNotSchoolHolidays = [];\n// Get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n  if (!schoolHolidayArray.includes(holiday)) {\n    publicHolidaysNotSchoolHolidays.push(holiday);\n  }\n});\n\nlet bootcampData;\n\n// Getting UTC datetime\nconst getLocalDateTime = (courseType, date) => {\n  const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n  let utc;\n\n  // need to alter this if you change the days of the week for the PT course.\n  if (courseType === \"FTBC\") {\n    utc = DateTime.fromISO(`${changedFormat}T10:00`, { zone: \"Singapore\" })\n      .toUTC()\n      .toISO();\n  } else if (courseType === \"PTBC\" && date.weekday === 1) {\n    utc = DateTime.fromISO(`${changedFormat}T19:30`, { zone: \"Singapore\" })\n      .toUTC()\n      .toISO();\n  } else if (courseType === \"PTBC\" && date.weekday === 4) {\n    utc = DateTime.fromISO(`${changedFormat}T19:30`, { zone: \"Singapore\" })\n      .toUTC()\n      .toISO();\n  } else if (courseType === \"PTBC\" && date.weekday === 2) {\n    utc = DateTime.fromISO(`${changedFormat}T19:30`, { zone: \"Singapore\" })\n      .toUTC()\n      .toISO();\n  } else if (courseType === \"PTBC\" && date.weekday === 6) {\n    utc = DateTime.fromISO(`${changedFormat}T10:00`, { zone: \"Singapore\" })\n      .toUTC()\n      .toISO();\n  }\n  return utc;\n};\n\nconst generateTopLevelObject = (courseType) => {\n  const topLevelObject = {\n    courseType,\n    days: {},\n  };\n\n  topLevelObject.daysOfWeek = bootcampData.daysOfWeek;\n  topLevelObject.courseStartDaysOfWeekIndex =\n    bootcampData.courseStartDaysOfWeekIndex;\n  topLevelObject.totalCourseDays = bootcampData.totalCourseDays;\n\n  return topLevelObject;\n};\n\n// Generate dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj, courseType) => {\n  let weekOfCourse;\n  if (courseType.includes(\"BC\") && schoolHolidayArray.includes(dateString)) {\n    weekOfCourse = null;\n  } else {\n    weekOfCourse = week;\n  }\n\n  dateObj = {\n    courseDay: null,\n    courseDate: dateString,\n    courseWeek: weekOfCourse,\n    dayNumber: date.weekday,\n    dateTypes: {},\n  };\n\n  if (publicHolidaysNotSchoolHolidays.includes(dateString)) {\n    dateObj.dateTypes = publicHolidays[dateString];\n  } else {\n    dateObj.dateTypes = schoolHolidays[dateString];\n  }\n\n  return dateObj;\n};\n\n// Generate dateObj for a normal course day\nconst generateCourseDayObject = (\n  dateObj,\n  dateString,\n  week,\n  weekDay,\n  date,\n  utc,\n  courseDay\n) => ({\n  courseDate: dateString,\n  courseWeek: week,\n  weekDay,\n  dayNumber: date.weekday,\n  meetingDateTimeUTC: utc,\n  ...dateObj,\n  ...bootcampData.days[courseDay],\n});\n\n// Generate filename\nconst getFilename = (startDate, endDate, courseType, batchNum) => {\n  const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n  const displayName = `${displayDate.toFormat(\n    \"dd-MM-yyyy\"\n  )}_${endDate}_${courseType}${batchNum}`;\n  return displayName;\n};\n\nconst generateDataObject = (startDate, batchNum, courseType) => {\n  if (courseType === \"FTBC\") {\n    bootcampData = ftbcDataJson;\n  } else if (courseType === \"PTBC\") {\n    bootcampData = ptbcDataJson;\n  }\n\n  let currDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n  let utc = getLocalDateTime(courseType, currDate);\n  let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n  let week = 1;\n  let weekDay = 1;\n  let courseDayCount;\n  // Starts from 0 to track index of JSON data file\n  let courseDay = 0;\n\n  const data = generateTopLevelObject(courseType);\n\n  // Set num course days based on course type\n  if (courseType === \"FTBC\") {\n    courseDayCount = ftbcDataJson.days.length;\n  } else if (courseType === \"PTBC\") {\n    courseDayCount = ptbcDataJson.days.length;\n  }\n\n  const dayArray = data.daysOfWeek;\n  let dayIndex = data.courseStartDaysOfWeekIndex;\n\n  while (courseDayCount > 0) {\n    const dateString = currDate.toFormat(\"dd-MM-yyyy\");\n\n    // Set filename from start date, end date, courseType (FTBC/PTBC), batchNum\n    // if this condition is met, dateString will be the end date of course\n    if (courseDay + 1 === data.totalCourseDays) {\n      // start date\n      data.courseName = getFilename(\n        startDate,\n        dateString,\n        courseType,\n        batchNum\n      );\n    }\n\n    let dateObj;\n    // If date is a public holiday\n    if (\n      publicHolidaysNotSchoolHolidays.includes(dateString) ||\n      winterBreak.includes(dateString)\n    ) {\n      dateObj = generateHolidayObject(\n        dateString,\n        week,\n        currDate,\n        dateObj,\n        courseType\n      );\n    } else {\n      dateObj = generateCourseDayObject(\n        dateObj,\n        dateString,\n        week,\n        weekDay,\n        currDate,\n        utc,\n        courseDay\n      );\n\n      // Increase course days on days that classes are held,\n      // DO NOT increase course days on holidays\n      courseDayCount -= 1;\n      courseDay += 1;\n    }\n    data.days[dateString] = dateObj;\n\n    // If we have reached end of week, return to beginning of array (i.e. beginning of week)\n    if (dayIndex === dayArray.length - 1) {\n      weekDay = 1;\n      dayIndex = 0;\n      currDate = currDate\n        .plus({ weeks: 1 })\n        .set({ weekday: dayArray[dayIndex] });\n      dateWeek = dateWeek.plus({ weeks: 1 });\n      if (!schoolHolidayArray.includes(dateString)) {\n        week += 1;\n      }\n    }\n    // Else the current day is within the week\n    else {\n      dayIndex += 1;\n      currDate = currDate.set({ weekday: dayArray[dayIndex] });\n      if (!publicHolidaysNotSchoolHolidays.includes(dateString)) {\n        weekDay += 1;\n      }\n    }\n    utc = getLocalDateTime(courseType, currDate);\n  }\n  return data;\n};\n\nexport default generateDataObject;\n","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../download.js\";\nimport generateDataObject from \"../generateCourseDates.js\";\n\n// Generate course schedule based on start date and course type from schedule template\nconst BatchScheduleGenerator = () => {\n  // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [batchNum, setBatchNum] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = () => {\n    const data = generateDataObject(startDate, batchNum, courseType);\n    download(data, `${data.courseName}.json`);\n  };\n\n  return (\n    <div className=\"data-shift\">\n      <div className=\"data-container\">\n        <div className=\"date-picker\">\n          <div>\n            <h2>Generate Schedule Data File</h2>\n          </div>\n          <div className=\"input-form-container\">\n            <Form className=\"input-form\">\n              <div className=\"input-fields\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n                  <Form.Label>Start Date</Form.Label>\n                  <Form.Control\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => setStartDate(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>Batch Number</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    value={batchNum}\n                    onChange={(e) => setBatchNum(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>Course Type</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-type\"\n                    onChange={(e) => setCourseType(e.target.value)}\n                  >\n                    <option>Select course type</option>\n                    <option value=\"FTBC\">FTBC</option>\n                    <option value=\"PTBC\">PTBC</option>\n                  </Form.Select>\n                </Form.Group>\n              </div>\n            </Form>\n            <div className=\"submit-button-container\">\n              <Button\n                className=\"create-file\"\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={() => {\n                  handleDownload();\n                }}\n              >\n                Download Schedule\n              </Button>\n            </div>\n            <br></br>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BatchScheduleGenerator;\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport ftbc9 from \"./data/17-10-2022_23-02-2023_FTBC9.json\";\nimport ftbc10 from \"./data/30-01-2023_22-05-2023_FTBC10.json\";\nimport ftbc11 from \"./data/20-03-2023_11-07-2023_FTBC11.json\";\nimport ftbc12 from \"./data/08-05-2023_29-08-2023_FTBC12.json\";\n\nimport ptbc5 from \"./data/30-08-2022_29-04-2023_PTBC5.json\";\nimport ptbc6 from \"./data/26-11-2022_29-07-2023_PTBC6.json\";\nimport ptbc7 from \"./data/18-03-2023_31-10-2023_PTBC7.json\";\nimport ptbc8 from \"./data/17-06-2023_23-01-2024_PTBC8.json\";\n\nimport ScheduleContainer from \"./components/schedules/ScheduleContainer\";\nimport BatchScheduleGenerator from \"./components/BatchScheduleGenerator\";\n\nfunction App() {\n  const batchArray = [\n    { name: \"ftbc9\", content: ftbc9 },\n    { name: \"ftbc10\", content: ftbc10 },\n    { name: \"ftbc11\", content: ftbc11 },\n    { name: \"ftbc12\", content: ftbc12 },\n\n    { name: \"ptbc5\", content: ptbc5 },\n    { name: \"ptbc6\", content: ptbc6 },\n    { name: \"ptbc7\", content: ptbc7 },\n    { name: \"ptbc8\", content: ptbc8 },\n  ];\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          {/* route that takes user to part of app that edits course schedules */}\n          <Route path=\"/admin\">\n            <BatchScheduleGenerator />\n          </Route>\n          {/* route that takes user to part of app that displays batch schedules for student use */}\n          <Route path=\"/\">\n            <ScheduleContainer batchArray={batchArray} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./sass/index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}